name: Deploy to QA

on:
  workflow_dispatch:

jobs:

  build-and-push-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from source repository
        uses: actions/checkout@v4
        with:
          repository: "sihingbenni/spaceInvaders-source"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Backend Docker image
        run: docker build -t space_invader_backend ./backend/

      - name: Build Frontend Docker image
        run: docker build -t space_invader_frontend ./frontend/

      - name: Generate Date String
        id: date
        run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Tag and push Backend Docker image
        run: |
          docker tag space_invader_backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-backend
          docker tag space_invader_backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:nightly
          docker tag space_invader_backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ steps.date.outputs.date }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-backend

      - name: Tag and push Frontend Docker image
        run: |
          docker tag space_invader_frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-frontend
          docker tag space_invader_frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:nightly
          docker tag space_invader_frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ steps.date.outputs.date }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-frontend

  deploy:
    runs-on: ubuntu-latest
    environment: QA-EC2
    needs: build-and-push-docker-images
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
      - name: Create temporary SSH key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key.pem

      - name: Set permissions for SSH key
        run: chmod 600 /tmp/ssh_key.pem

      - name: Get Public DNS Name
        id: get-public-dns
        run: |
          aws ec2 wait instance-running --instance-ids ${{ vars.EC2_INSTANCE_ID }}
          PUBLIC_DNS=$(aws ec2 describe-instances \
          --instance-ids ${{ vars.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicDnsName' \
          --output text)
          echo "Public DNS: $PUBLIC_DNS"
          echo "public_dns=$PUBLIC_DNS" >> $GITHUB_OUTPUT

      - name: Log in to Amazon ECR and deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ubuntu@${{ steps.get-public-dns.outputs.public_dns }} << 'EOF'
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com)
            echo "Pruning Docker system"
            docker system prune -af
            echo "Pulling image from ECR"
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-frontend
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-backend
            
            echo "Stopping and removing existing container"
            docker stop space_invader_backend || true
            docker stop space_invader_frontend || true
            docker container rm -f space_invader_backend || true
            docker container rm -f space_invader_frontend || true

            echo "Starting Backend"
            docker run -d --name space_invader_backend -p ${{ vars.BACKEND_PORT }}:${{ vars.BACKEND_PORT }} \
              -e NODE_ENV=production \
              -e BACKEND_PORT=${{ vars.BACKEND_PORT }} \
              -e BACKEND_HOST=${{ vars.BACKEND_PORT }} \
              -e BACKEND_URL=${{ vars.BACKEND_URL }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-backend
          
            echo "Starting Frontend"
            docker run -d --name space_invader_frontend -p 80:${{ vars.FRONTEND_PORT }} \
              -e NODE_ENV=production \
              -e DB_URL=${{ secrets.DB_URL}} \
              -e BACKEND_PORT=${{ vars.BACKEND_PORT }} \
              -e BACKEND_HOST=${{ vars.BACKEND_PORT }} \
              -e BACKEND_URL=${{ vars.BACKEND_URL }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}-frontend
          
          EOF