name: Deploy to QA

on:
  workflow_dispatch:

jobs:

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from source repository
        uses: actions/checkout@v4

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: docker build -t spaceInvader .

      - name: Generate Date String
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"

      - name: Tag and push Docker image
        run: |
          docker tag spaceInvader:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}
          docker tag soaceInvader:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:nightly
          docker tag spaceInvader:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ steps.date.outputs.date }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}

  deploy:
    runs-on: ubuntu-latest
    environment: QA-EC2
    needs: build-and-push-docker-image
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
      - name: Create temporary SSH key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key.pem

      - name: Set permissions for SSH key
        run: chmod 600 /tmp/ssh_key.pem

      - name: Log in to Amazon ECR and deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ubuntu@${{ vars.EC2_PUBLIC_DNS }} << 'EOF'
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com)
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}
            docker stop spaceInvader || true
            docker container rm -f spaceInvader || true
            docker run -d --name spaceInvader -p 80:8080 \
              -e TOKEN_KEY=${{ secrets.TOKEN_KEY}} \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              -e DYNAMODB_TABLE_NAME=${{ vars.DYNAMODB_TABLE_NAME }} \
              -e RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }} \
              -e DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e aws_session_token=${{ secrets.AWS_SESSION_TOKEN }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}
          EOF
